
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Mon Aug 27 23:22:16 CEST 2018
//----------------------------------------------------

package parse;

import java_cup.runtime.*;
import absyn.*;
import sym.*;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Mon Aug 27 23:22:16 CEST 2018
  */
public class Parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\076\000\002\002\004\000\002\002\004\000\002\002" +
    "\002\000\002\003\003\000\002\003\003\000\002\004\007" +
    "\000\002\004\007\000\002\005\010\000\002\005\010\000" +
    "\002\006\013\000\002\011\003\000\002\011\002\000\002" +
    "\010\003\000\002\010\005\000\002\007\005\000\002\007" +
    "\006\000\002\013\004\000\002\013\002\000\002\012\007" +
    "\000\002\012\007\000\002\020\004\000\002\020\002\000" +
    "\002\017\003\000\002\017\003\000\002\017\003\000\002" +
    "\017\003\000\002\017\003\000\002\017\003\000\002\014" +
    "\007\000\002\016\003\000\002\016\002\000\002\015\003" +
    "\000\002\015\005\000\002\022\007\000\002\021\011\000" +
    "\002\021\007\000\002\023\006\000\002\024\003\000\002" +
    "\024\006\000\002\025\006\000\002\025\003\000\002\030" +
    "\005\000\002\031\005\000\002\031\005\000\002\031\003" +
    "\000\002\032\005\000\002\032\005\000\002\032\003\000" +
    "\002\033\004\000\002\033\003\000\002\034\005\000\002" +
    "\034\003\000\002\035\003\000\002\035\003\000\002\036" +
    "\003\000\002\036\003\000\002\036\003\000\002\036\003" +
    "\000\002\036\003\000\002\036\003\000\002\026\005\000" +
    "\002\027\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\170\000\010\002\uffff\010\006\012\011\001\002\000" +
    "\004\002\172\001\002\000\010\002\uffff\010\006\012\011" +
    "\001\002\000\004\042\027\001\002\000\010\002\ufffd\010" +
    "\ufffd\012\ufffd\001\002\000\010\002\ufffe\010\ufffe\012\ufffe" +
    "\001\002\000\004\042\012\001\002\000\004\030\013\001" +
    "\002\000\006\004\016\042\014\001\002\000\004\040\026" +
    "\001\002\000\004\040\025\001\002\000\004\017\017\001" +
    "\002\000\004\041\020\001\002\000\004\020\021\001\002" +
    "\000\004\007\022\001\002\000\006\004\016\042\023\001" +
    "\002\000\004\040\ufff9\001\002\000\004\040\ufffa\001\002" +
    "\000\010\002\ufffc\010\ufffc\012\ufffc\001\002\000\010\002" +
    "\ufffb\010\ufffb\012\ufffb\001\002\000\004\015\030\001\002" +
    "\000\010\011\031\016\ufff6\042\034\001\002\000\004\042" +
    "\166\001\002\000\004\016\ufff7\001\002\000\006\016\ufff5" +
    "\033\164\001\002\000\004\026\162\001\002\000\004\016" +
    "\036\001\002\000\004\022\037\001\002\000\020\006\ufff0" +
    "\013\040\014\ufff0\021\ufff0\022\ufff0\040\ufff0\042\ufff0\001" +
    "\002\000\004\042\154\001\002\000\020\006\ufff0\013\040" +
    "\014\ufff0\021\ufff0\022\ufff0\040\ufff0\042\ufff0\001\002\000" +
    "\016\006\053\014\043\021\uffec\022\054\040\050\042\046" +
    "\001\002\000\004\015\147\001\002\000\020\005\uffeb\006" +
    "\uffeb\014\uffeb\021\uffeb\022\uffeb\040\uffeb\042\uffeb\001\002" +
    "\000\004\021\146\001\002\000\010\015\136\017\uffd9\025" +
    "\uffdc\001\002\000\004\025\133\001\002\000\020\005\uffe6" +
    "\006\uffe6\014\uffe6\021\uffe6\022\uffe6\040\uffe6\042\uffe6\001" +
    "\002\000\020\005\uffe9\006\uffe9\014\uffe9\021\uffe9\022\uffe9" +
    "\040\uffe9\042\uffe9\001\002\000\020\005\uffea\006\uffea\014" +
    "\uffea\021\uffea\022\uffea\040\uffea\042\uffea\001\002\000\004" +
    "\015\114\001\002\000\016\006\053\014\043\021\uffec\022" +
    "\054\040\050\042\046\001\002\000\004\017\062\001\002" +
    "\000\020\005\uffe7\006\uffe7\014\uffe7\021\uffe7\022\uffe7\040" +
    "\uffe7\042\uffe7\001\002\000\020\005\uffe8\006\uffe8\014\uffe8" +
    "\021\uffe8\022\uffe8\040\uffe8\042\uffe8\001\002\000\016\006" +
    "\053\014\043\021\uffec\022\054\040\050\042\046\001\002" +
    "\000\004\021\uffed\001\002\000\012\015\073\034\063\041" +
    "\066\042\064\001\002\000\010\015\073\041\066\042\064" +
    "\001\002\000\040\016\uffdc\017\uffd9\020\uffdc\023\uffdc\024" +
    "\uffdc\027\uffdc\030\uffdc\031\uffdc\032\uffdc\033\uffdc\034\uffdc" +
    "\035\uffdc\036\uffdc\037\uffdc\040\uffdc\001\002\000\036\016" +
    "\uffcd\020\uffcd\023\uffcd\024\uffcd\027\uffcd\030\uffcd\031\uffcd" +
    "\032\uffcd\033\uffcd\034\uffcd\035\uffcd\036\uffcd\037\uffcd\040" +
    "\uffcd\001\002\000\036\016\uffcc\020\uffcc\023\uffcc\024\uffcc" +
    "\027\uffcc\030\uffcc\031\uffcc\032\uffcc\033\uffcc\034\uffcc\035" +
    "\uffcc\036\uffcc\037\uffcc\040\uffcc\001\002\000\010\020\107" +
    "\034\104\035\103\001\002\000\036\016\uffce\020\uffce\023" +
    "\uffce\024\uffce\027\uffce\030\uffce\031\uffce\032\uffce\033\uffce" +
    "\034\uffce\035\uffce\036\uffce\037\uffce\040\uffce\001\002\000" +
    "\036\016\uffd0\020\uffd0\023\uffd0\024\uffd0\027\uffd0\030\uffd0" +
    "\031\uffd0\032\uffd0\033\uffd0\034\uffd0\035\uffd0\036\uffd0\037" +
    "\uffd0\040\uffd0\001\002\000\036\016\uffd2\020\uffd2\023\uffd2" +
    "\024\uffd2\027\uffd2\030\uffd2\031\uffd2\032\uffd2\033\uffd2\034" +
    "\uffd2\035\uffd2\036\uffd2\037\uffd2\040\uffd2\001\002\000\012" +
    "\015\073\034\063\041\066\042\064\001\002\000\036\016" +
    "\uffd5\020\uffd5\023\uffd5\024\uffd5\027\uffd5\030\uffd5\031\uffd5" +
    "\032\uffd5\033\uffd5\034\uffd5\035\uffd5\036\075\037\076\040" +
    "\uffd5\001\002\000\012\015\073\034\063\041\066\042\064" +
    "\001\002\000\012\015\073\034\063\041\066\042\064\001" +
    "\002\000\036\016\uffd3\020\uffd3\023\uffd3\024\uffd3\027\uffd3" +
    "\030\uffd3\031\uffd3\032\uffd3\033\uffd3\034\uffd3\035\uffd3\036" +
    "\uffd3\037\uffd3\040\uffd3\001\002\000\036\016\uffd4\020\uffd4" +
    "\023\uffd4\024\uffd4\027\uffd4\030\uffd4\031\uffd4\032\uffd4\033" +
    "\uffd4\034\uffd4\035\uffd4\036\uffd4\037\uffd4\040\uffd4\001\002" +
    "\000\010\016\102\034\104\035\103\001\002\000\036\016" +
    "\uffcf\020\uffcf\023\uffcf\024\uffcf\027\uffcf\030\uffcf\031\uffcf" +
    "\032\uffcf\033\uffcf\034\uffcf\035\uffcf\036\uffcf\037\uffcf\040" +
    "\uffcf\001\002\000\012\015\073\034\063\041\066\042\064" +
    "\001\002\000\012\015\073\034\063\041\066\042\064\001" +
    "\002\000\036\016\uffd6\020\uffd6\023\uffd6\024\uffd6\027\uffd6" +
    "\030\uffd6\031\uffd6\032\uffd6\033\uffd6\034\uffd6\035\uffd6\036" +
    "\075\037\076\040\uffd6\001\002\000\036\016\uffd7\020\uffd7" +
    "\023\uffd7\024\uffd7\027\uffd7\030\uffd7\031\uffd7\032\uffd7\033" +
    "\uffd7\034\uffd7\035\uffd7\036\075\037\076\040\uffd7\001\002" +
    "\000\042\016\uffdb\017\uffda\020\uffdb\023\uffdb\024\uffdb\025" +
    "\uffdb\027\uffdb\030\uffdb\031\uffdb\032\uffdb\033\uffdb\034\uffdb" +
    "\035\uffdb\036\uffdb\037\uffdb\040\uffdb\001\002\000\036\016" +
    "\uffd1\020\uffd1\023\uffd1\024\uffd1\027\uffd1\030\uffd1\031\uffd1" +
    "\032\uffd1\033\uffd1\034\uffd1\035\uffd1\036\uffd1\037\uffd1\040" +
    "\uffd1\001\002\000\004\021\uffc4\001\002\000\004\021\113" +
    "\001\002\000\020\005\uffc5\006\uffc5\014\uffc5\021\uffc5\022" +
    "\uffc5\040\uffc5\042\uffc5\001\002\000\012\015\073\034\063" +
    "\041\066\042\064\001\002\000\004\016\127\001\002\000" +
    "\022\023\123\024\120\027\124\030\121\031\125\032\122" +
    "\034\104\035\103\001\002\000\012\015\073\034\063\041" +
    "\066\042\064\001\002\000\012\015\uffc7\034\uffc7\041\uffc7" +
    "\042\uffc7\001\002\000\012\015\uffcb\034\uffcb\041\uffcb\042" +
    "\uffcb\001\002\000\012\015\uffc9\034\uffc9\041\uffc9\042\uffc9" +
    "\001\002\000\012\015\uffc8\034\uffc8\041\uffc8\042\uffc8\001" +
    "\002\000\012\015\uffc6\034\uffc6\041\uffc6\042\uffc6\001\002" +
    "\000\012\015\uffca\034\uffca\041\uffca\042\uffca\001\002\000" +
    "\010\016\uffd8\034\104\035\103\001\002\000\014\006\053" +
    "\014\043\022\054\040\050\042\046\001\002\000\020\005" +
    "\131\006\uffde\014\uffde\021\uffde\022\uffde\040\uffde\042\uffde" +
    "\001\002\000\014\006\053\014\043\022\054\040\050\042" +
    "\046\001\002\000\020\005\uffdf\006\uffdf\014\uffdf\021\uffdf" +
    "\022\uffdf\040\uffdf\042\uffdf\001\002\000\012\015\073\034" +
    "\063\041\066\042\064\001\002\000\010\034\104\035\103" +
    "\040\135\001\002\000\020\005\uffdd\006\uffdd\014\uffdd\021" +
    "\uffdd\022\uffdd\040\uffdd\042\uffdd\001\002\000\014\015\073" +
    "\016\uffe3\034\063\041\066\042\064\001\002\000\004\016" +
    "\uffe4\001\002\000\012\016\uffe2\033\144\034\104\035\103" +
    "\001\002\000\004\016\142\001\002\000\004\040\143\001" +
    "\002\000\020\005\uffe5\006\uffe5\014\uffe5\021\uffe5\022\uffe5" +
    "\040\uffe5\042\uffe5\001\002\000\012\015\073\034\063\041" +
    "\066\042\064\001\002\000\004\016\uffe1\001\002\000\010" +
    "\002\ufff8\010\ufff8\012\ufff8\001\002\000\012\015\073\034" +
    "\063\041\066\042\064\001\002\000\004\016\151\001\002" +
    "\000\014\006\053\014\043\022\054\040\050\042\046\001" +
    "\002\000\020\005\uffe0\006\uffe0\014\uffe0\021\uffe0\022\uffe0" +
    "\040\uffe0\042\uffe0\001\002\000\016\006\ufff1\014\ufff1\021" +
    "\ufff1\022\ufff1\040\ufff1\042\ufff1\001\002\000\004\026\155" +
    "\001\002\000\006\004\016\042\156\001\002\000\004\040" +
    "\161\001\002\000\004\040\160\001\002\000\020\006\uffef" +
    "\013\uffef\014\uffef\021\uffef\022\uffef\040\uffef\042\uffef\001" +
    "\002\000\020\006\uffee\013\uffee\014\uffee\021\uffee\022\uffee" +
    "\040\uffee\042\uffee\001\002\000\004\042\163\001\002\000" +
    "\006\016\ufff3\033\ufff3\001\002\000\006\011\031\042\034" +
    "\001\002\000\004\016\ufff4\001\002\000\004\026\167\001" +
    "\002\000\004\042\170\001\002\000\006\016\ufff2\033\ufff2" +
    "\001\002\000\004\002\000\001\002\000\004\002\001\001" +
    "\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\170\000\012\002\003\003\004\004\006\006\007\001" +
    "\001\000\002\001\001\000\012\002\170\003\004\004\006" +
    "\006\007\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\005\014\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\005\023\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\007\032\010\031\011\034\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\012" +
    "\040\013\041\001\001\000\002\001\001\000\006\012\040" +
    "\013\152\001\001\000\024\014\055\017\057\020\044\021" +
    "\051\022\043\023\056\024\046\025\054\026\050\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\026\014" +
    "\055\017\057\020\110\021\051\022\043\023\056\024\046" +
    "\025\054\026\050\027\111\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\024\014\055\017\057" +
    "\020\060\021\051\022\043\023\056\024\046\025\054\026" +
    "\050\001\001\000\002\001\001\000\020\024\064\025\054" +
    "\031\066\032\073\033\071\034\070\035\067\001\001\000" +
    "\012\024\064\025\054\034\107\035\067\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\020\024\064\025\054\031\100\032\073\033\071\034" +
    "\070\035\067\001\001\000\002\001\001\000\014\024\064" +
    "\025\054\033\077\034\070\035\067\001\001\000\014\024" +
    "\064\025\054\033\076\034\070\035\067\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\016\024\064\025\054\032\105\033\071\034\070" +
    "\035\067\001\001\000\016\024\064\025\054\032\104\033" +
    "\071\034\070\035\067\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\022\024\064" +
    "\025\054\030\114\031\115\032\073\033\071\034\070\035" +
    "\067\001\001\000\002\001\001\000\004\036\116\001\001" +
    "\000\020\024\064\025\054\031\125\032\073\033\071\034" +
    "\070\035\067\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\022\014\055\017\127" +
    "\021\051\022\043\023\056\024\046\025\054\026\050\001" +
    "\001\000\002\001\001\000\022\014\055\017\131\021\051" +
    "\022\043\023\056\024\046\025\054\026\050\001\001\000" +
    "\002\001\001\000\020\024\064\025\054\031\133\032\073" +
    "\033\071\034\070\035\067\001\001\000\002\001\001\000" +
    "\002\001\001\000\024\015\136\016\140\024\064\025\054" +
    "\031\137\032\073\033\071\034\070\035\067\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\022\015\144\024\064\025" +
    "\054\031\137\032\073\033\071\034\070\035\067\001\001" +
    "\000\002\001\001\000\002\001\001\000\022\024\064\025" +
    "\054\030\147\031\115\032\073\033\071\034\070\035\067" +
    "\001\001\000\002\001\001\000\022\014\055\017\151\021" +
    "\051\022\043\023\056\024\046\025\054\026\050\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\005\156\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\007\032\010\164\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




  public void syntax_error(Symbol currToken) {
    System.out.println(
      "**** Error: syntax error" +
      " in line " + currToken.left +
      ", column " + currToken.right
    );
    System.exit(0);
  }


}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$Parser$actions {
  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // blockKoerperInhalt ::= anweisungenInfinite 
            {
              StmList RESULT =null;
		int stmleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int stmright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		StmList stm = (StmList)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = stm; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("blockKoerperInhalt",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // blockKoerper ::= LCURL blockKoerperInhalt RCURL 
            {
              CompStm RESULT =null;
		int compListleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int compListright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		StmList compList = (StmList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new CompStm(compListleft, compListright, compList);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("blockKoerper",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // vergleichsOperatoren ::= NE 
            {
              Integer RESULT =null;
		 RESULT = OpExp.NEQ; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("vergleichsOperatoren",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // vergleichsOperatoren ::= GE 
            {
              Integer RESULT =null;
		 RESULT = OpExp.GRE; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("vergleichsOperatoren",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // vergleichsOperatoren ::= GT 
            {
              Integer RESULT =null;
		 RESULT = OpExp.GRT; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("vergleichsOperatoren",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // vergleichsOperatoren ::= LE 
            {
              Integer RESULT =null;
		 RESULT = OpExp.LSE; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("vergleichsOperatoren",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // vergleichsOperatoren ::= LT 
            {
              Integer RESULT =null;
		 RESULT = OpExp.LST; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("vergleichsOperatoren",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // vergleichsOperatoren ::= EQ 
            {
              Integer RESULT =null;
		 RESULT = OpExp.EQU; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("vergleichsOperatoren",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // rech4 ::= INTLIT 
            {
              Exp RESULT =null;
		int zahlleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int zahlright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Integer zahl = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new IntExp(zahlleft, zahlright, zahl); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("rech4",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // rech4 ::= variablenName 
            {
              Exp RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Var var = (Var)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new VarExp(varleft, varright, var); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("rech4",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // rech3 ::= rech4 
            {
              Exp RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Exp exp = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = exp; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("rech3",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // rech3 ::= LPAREN ausdruckTerm RPAREN 
            {
              Exp RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Exp exp = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = exp; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("rech3",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // rech2 ::= rech3 
            {
              Exp RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Exp exp = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = exp; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("rech2",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // rech2 ::= MINUS rech3 
            {
              Exp RESULT =null;
		int oprleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int oprright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object opr = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int exp1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int exp1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Exp exp1 = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new OpExp(oprleft, oprright, OpExp.SUB, new IntExp(oprleft, oprright, 0), exp1); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("rech2",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // rech1 ::= rech2 
            {
              Exp RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Exp exp = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = exp; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("rech1",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // rech1 ::= rech1 SLASH rech2 
            {
              Exp RESULT =null;
		int exp1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int exp1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Exp exp1 = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int oprleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int oprright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object opr = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int exp2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int exp2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Exp exp2 = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new OpExp(oprleft, oprright, OpExp.DIV, exp1, exp2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("rech1",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // rech1 ::= rech1 STAR rech2 
            {
              Exp RESULT =null;
		int exp1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int exp1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Exp exp1 = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int oprleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int oprright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object opr = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int exp2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int exp2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Exp exp2 = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new OpExp(oprleft, oprright, OpExp.MUL, exp1, exp2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("rech1",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // ausdruckTerm ::= rech1 
            {
              Exp RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Exp exp = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = exp; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ausdruckTerm",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // ausdruckTerm ::= ausdruckTerm MINUS rech1 
            {
              Exp RESULT =null;
		int exp1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int exp1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Exp exp1 = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int oprleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int oprright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object opr = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int exp2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int exp2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Exp exp2 = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new OpExp(oprleft, oprright, OpExp.SUB, exp1, exp2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ausdruckTerm",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // ausdruckTerm ::= ausdruckTerm PLUS rech1 
            {
              Exp RESULT =null;
		int exp1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int exp1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Exp exp1 = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int oprleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int oprright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object opr = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int exp2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int exp2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Exp exp2 = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new OpExp(oprleft, oprright, OpExp.ADD, exp1, exp2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ausdruckTerm",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // vergleichsAusdruck ::= ausdruckTerm vergleichsOperatoren ausdruckTerm 
            {
              Exp RESULT =null;
		int exp1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int exp1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Exp exp1 = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int oprleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int oprright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Integer opr = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int exp2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int exp2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Exp exp2 = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new OpExp(oprleft, oprright, opr, exp1, exp2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("vergleichsAusdruck",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // variablenNameInfinite ::= IDENT 
            {
              Var RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SimpleVar(nameleft, nameright, Sym.newSym(name)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("variablenNameInfinite",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // variablenNameInfinite ::= variablenNameInfinite LBRACK ausdruckTerm RBRACK 
            {
              Var RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Var var = (Var)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Exp exp = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new ArrayVar(varleft, varright, var, exp); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("variablenNameInfinite",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // variablenName ::= variablenNameInfinite LBRACK ausdruckTerm RBRACK 
            {
              Var RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Var var = (Var)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Exp exp = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new ArrayVar(varleft, varright, var, exp); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("variablenName",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // variablenName ::= IDENT 
            {
              Var RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SimpleVar(nameleft, nameright, Sym.newSym(name)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("variablenName",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // variablenZuweisungen ::= variablenName ASGN ausdruckTerm SEMIC 
            {
              AssignStm RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Var var = (Var)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Exp exp = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new AssignStm(varleft, varright, var, exp); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("variablenZuweisungen",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // ifVerzweigung ::= IF LPAREN vergleichsAusdruck RPAREN anweisungen 
            {
              IfStm RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Exp expr = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int stmsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int stmsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Stm stms = (Stm)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new IfStm(exprleft, exprright, expr, stms, new EmptyStm(stmsleft, stmsright) ); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ifVerzweigung",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // ifVerzweigung ::= IF LPAREN vergleichsAusdruck RPAREN anweisungen ELSE anweisungen 
            {
              IfStm RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Exp expr = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int stmsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int stmsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Stm stms = (Stm)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int elseStmsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int elseStmsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Stm elseStms = (Stm)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new IfStm(exprleft, exprright, expr, stms, elseStms); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ifVerzweigung",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // whileSchleife ::= WHILE LPAREN vergleichsAusdruck RPAREN anweisungen 
            {
              WhileStm RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Exp expr = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int stmsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int stmsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Stm stms = (Stm)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new WhileStm(exprleft, exprright, expr, stms); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("whileSchleife",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // prozedurParameterAufruf ::= ausdruckTerm COMMA prozedurParameterAufruf 
            {
              ExpList RESULT =null;
		int headleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int headright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Exp head = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int tailleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tailright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ExpList tail = (ExpList)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new ExpList(head, tail); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("prozedurParameterAufruf",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // prozedurParameterAufruf ::= ausdruckTerm 
            {
              ExpList RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Exp exp = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new ExpList(exp, new ExpList()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("prozedurParameterAufruf",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // prozedurParameterAufrufOderLeer ::= 
            {
              ExpList RESULT =null;
		 RESULT = new ExpList(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("prozedurParameterAufrufOderLeer",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // prozedurParameterAufrufOderLeer ::= prozedurParameterAufruf 
            {
              ExpList RESULT =null;
		int expListleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int expListright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ExpList expList = (ExpList)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = expList; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("prozedurParameterAufrufOderLeer",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // methodenAufruf ::= IDENT LPAREN prozedurParameterAufrufOderLeer RPAREN SEMIC 
            {
              CallStm RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int expListleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int expListright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		ExpList expList = (ExpList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 RESULT = new CallStm(nameleft, nameright, Sym.newSym(name), expList); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("methodenAufruf",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // anweisungen ::= SEMIC 
            {
              Stm RESULT =null;
		int emptyleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int emptyright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object empty = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT:empty = new EmptyStm(emptyleft, emptyright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("anweisungen",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // anweisungen ::= methodenAufruf 
            {
              Stm RESULT =null;
		int methodStmleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int methodStmright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		CallStm methodStm = (CallStm)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = methodStm; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("anweisungen",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // anweisungen ::= variablenZuweisungen 
            {
              Stm RESULT =null;
		int varValueStmleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int varValueStmright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		AssignStm varValueStm = (AssignStm)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = varValueStm; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("anweisungen",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // anweisungen ::= blockKoerper 
            {
              Stm RESULT =null;
		int blockStmleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int blockStmright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		CompStm blockStm = (CompStm)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = blockStm; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("anweisungen",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // anweisungen ::= ifVerzweigung 
            {
              Stm RESULT =null;
		int ifStmleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int ifStmright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		IfStm ifStm = (IfStm)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = ifStm; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("anweisungen",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // anweisungen ::= whileSchleife 
            {
              Stm RESULT =null;
		int whileStmleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int whileStmright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		WhileStm whileStm = (WhileStm)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = whileStm; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("anweisungen",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // anweisungenInfinite ::= 
            {
              StmList RESULT =null;
		 RESULT = new StmList(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("anweisungenInfinite",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // anweisungenInfinite ::= anweisungen anweisungenInfinite 
            {
              StmList RESULT =null;
		int headleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int headright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Stm head = (Stm)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int tailleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tailright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		StmList tail = (StmList)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new StmList(head, tail);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("anweisungenInfinite",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // variablenDeklaration ::= VAR IDENT COLON IDENT SEMIC 
            {
              VarDec RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int typeleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String type = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new VarDec(nameleft, nameright, Sym.newSym(name), new NameTy(typeleft, typeright, Sym.newSym(type))); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("variablenDeklaration",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // variablenDeklaration ::= VAR IDENT COLON typeArrayInfinite SEMIC 
            {
              VarDec RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int typeleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		ArrayTy type = (ArrayTy)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new VarDec(nameleft, nameright, Sym.newSym(name), type); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("variablenDeklaration",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // variablenDeklarationInfinite ::= 
            {
              DecList RESULT =null;
		 RESULT = new DecList(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("variablenDeklarationInfinite",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // variablenDeklarationInfinite ::= variablenDeklaration variablenDeklarationInfinite 
            {
              DecList RESULT =null;
		int varDecleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int varDecright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		VarDec varDec = (VarDec)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int varDecListleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int varDecListright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		DecList varDecList = (DecList)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new DecList(varDec, varDecList); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("variablenDeklarationInfinite",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // prozedurParameter ::= REF IDENT COLON IDENT 
            {
              ParDec RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int typeleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String type = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new ParDec(nameleft, nameright, Sym.newSym(name), new NameTy(typeleft, typeright, Sym.newSym(type)), true); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("prozedurParameter",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // prozedurParameter ::= IDENT COLON IDENT 
            {
              ParDec RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int typeleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String type = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new ParDec(nameleft, nameright, Sym.newSym(name), new NameTy(typeleft, typeright, Sym.newSym(type)), false); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("prozedurParameter",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // prozedurParameterInfinite ::= prozedurParameter COMMA prozedurParameterInfinite 
            {
              DecList RESULT =null;
		int paraDecleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int paraDecright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		ParDec paraDec = (ParDec)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int paraDecListleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int paraDecListright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		DecList paraDecList = (DecList)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new DecList(paraDec, paraDecList); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("prozedurParameterInfinite",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // prozedurParameterInfinite ::= prozedurParameter 
            {
              DecList RESULT =null;
		int paraDecleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int paraDecright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ParDec paraDec = (ParDec)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new DecList(paraDec, new DecList()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("prozedurParameterInfinite",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // prozedurParameterInfiniteOderLeer ::= 
            {
              DecList RESULT =null;
		 RESULT = new DecList(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("prozedurParameterInfiniteOderLeer",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // prozedurParameterInfiniteOderLeer ::= prozedurParameterInfinite 
            {
              DecList RESULT =null;
		int paraDecListleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int paraDecListright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		DecList paraDecList = (DecList)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = paraDecList; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("prozedurParameterInfiniteOderLeer",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // methodeDeklaration ::= PROC IDENT LPAREN prozedurParameterInfiniteOderLeer RPAREN LCURL variablenDeklarationInfinite anweisungenInfinite RCURL 
            {
              ProcDec RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-7)).value;
		int paramsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int paramsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		DecList params = (DecList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int vardecListleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int vardecListright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		DecList vardecList = (DecList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int anweisungendecListleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int anweisungendecListright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		StmList anweisungendecList = (StmList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new ProcDec(nameleft, nameright, Sym.newSym(name), params, vardecList, anweisungendecList); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("methodeDeklaration",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // typeArrayInfinite ::= ARRAY LBRACK INTLIT RBRACK OF IDENT 
            {
              ArrayTy RESULT =null;
		int sizeleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int sizeright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Integer size = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int typeleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String type = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new ArrayTy(sizeleft, sizeright, size, new NameTy(typeleft, typeright, Sym.newSym(type))); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("typeArrayInfinite",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // typeArrayInfinite ::= ARRAY LBRACK INTLIT RBRACK OF typeArrayInfinite 
            {
              ArrayTy RESULT =null;
		int sizeleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int sizeright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Integer size = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int typeleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ArrayTy type = (ArrayTy)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new ArrayTy(sizeleft, sizeright, size, type); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("typeArrayInfinite",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // typeDeklaration ::= TYPE IDENT EQ IDENT SEMIC 
            {
              TypeDec RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int oprleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int oprright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object opr = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int typeleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String type = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new TypeDec(oprleft, oprright, Sym.newSym(name), new NameTy(typeleft, typeright, Sym.newSym(type))); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("typeDeklaration",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // typeDeklaration ::= TYPE IDENT EQ typeArrayInfinite SEMIC 
            {
              TypeDec RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int oprleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int oprright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object opr = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int typeleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		ArrayTy type = (ArrayTy)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new TypeDec(oprleft, oprright, Sym.newSym(name), type); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("typeDeklaration",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // typOderMethode ::= typeDeklaration 
            {
              Dec RESULT =null;
		int typedecleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int typedecright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		TypeDec typedec = (TypeDec)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = typedec; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("typOderMethode",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // typOderMethode ::= methodeDeklaration 
            {
              Dec RESULT =null;
		int methodedecleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int methodedecright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ProcDec methodedec = (ProcDec)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = methodedec; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("typOderMethode",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // programStart ::= 
            {
              DecList RESULT =null;
		 RESULT = new DecList(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("programStart",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // programStart ::= typOderMethode programStart 
            {
              DecList RESULT =null;
		int decleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int decright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Dec dec = (Dec)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int listright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		DecList list = (DecList)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new DecList(dec, list); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("programStart",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= programStart EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		DecList start_val = (DecList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

